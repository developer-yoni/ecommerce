spring:
  servlet:
    multipart:
      max-file-size: 15MB
      max-request-size: 100MB

  mustache:
    prefix: classpath:/templates/
    suffix: .html
    charset: utf-8
    servlet:
      content-type: text/html

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ecommerce
    username: yj
    password: kkt1326!

  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        #        show_sql: true
        format_sql: true
        default_batch_fetch_size: 100

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 59063304683-j0j38mi2uv8ral82al9765ppc0n0eb96.apps.googleusercontent.com
            client-secret: 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
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            scope:
              - email
              - profile
          facebook:
            client-id: 208888192270657
            client-secret: 25f67becd90e5241c382ed56f2f8fd56
            scope:
              - email
              - public_profile
          naver:
            client-id: xCtUALMAeFkoVCgRM9eq
            client-secret: p8Uzx2nG7d
            scope:
              - name
              - email
            client-name: Naver # 여기서는 들여쓰기가 중요합니다. client-Name 대신 client-name 사용
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
          kakao:
            client-id: 31b72d51ff4fe6cc03e35559f4d1a60e
            client-secret: ccTk8GulO0tcDOpaxxqi0IYjt0RvpCyT
            scope:
              - profile_nickname
              - account_email
            client-name: Kakao # 여기서는 들여쓰기가 중요합니다. client-Name 대신 client-name 사용
            client-authentication-method: client_secret_post #요거, 카카오는 client_secret_post로 설정 안하면 오류다! (이걸로 삽질 많이함) (즉 로그인창 요청할때, POST임)
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize # authorization-url 대신 authorization-uri 사용
            token-uri: https://nid.naver.com/oauth2.0/token # token-url 대신 token-uri 사용
            user-info-uri: https://openapi.naver.com/v1/nid/me # user-info-url 대신 user-info-uri 사용
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize #/oauth2/authorization/kakao 요청을 application server가 받아 , 여기서 등록한 카카오 로그인 페이지로 리다이렉션
            token-uri: https://kauth.kakao.com/oauth/token # token-url 대신 token-uri 사용 (즉 code값을 받은 후, security가 그 code값을 함께 넘기면서 accessToken을 요청할 텐데, 그 요청 url)
            user-info-uri: https://kapi.kakao.com/v2/user/me # user-info-url 대신 user-info-uri 사용(이후 loadUser()에서 accessToken으로 리소스 서버에게 사용자 정보를 요청할 때, 지정할 url)
            user-name-attribute: id



logging.level:
  org.hibernate.SQL: debug
  org.springframework.security: DEBUG
  org.springframework.security.oauth2: TRACE

server:
  servlet:
    encoding:
      force-response: true
